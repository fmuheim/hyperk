***********************************************************************
***********************************************************************
***********************************************************************
********* Guide to Edinburgh code for fitting MaPMT spectra  **********
********* Code written by Stephan Eisenhardt, Haofei Luo     **********
********* and Laurence Carson                                **********
********* Guide written by Laurence Carson (15.05.15)        ********** 
***********************************************************************
***********************************************************************
***********************************************************************


**** Macros *****

There are two macros, mainfit_FloatScales.C and mainfit_Bifurc.C. The only difference between them is that they use
a different model for the pedestal part of the spectrum. mainfit_FloatScales.C uses a single Gaussian, while
mainfit_Bifurc.C uses a bifucated Gaussian. This extension of the fit model was created because some spectra clearly
has different widths on either side of the pedestal peak. However for some spectra, the  single Gaussian works well (and
the fit can be more stable with one fewer free parameter in the fit).



**** How to run the code *****

Running the code is rather simple. The path to the .root file that you want to run over is given in the main
function (more details on the functions are given below). Then you just need to choose which pixel you want to run over.
For example, if you want to use mainfit_Bifurc.C to run over pixel 7, then you run the following from the command line:

root -l -q 'mainfit_Bifurc.C(7)'

To run over many pixels, a number of lines such as the one above can simply be written into a .sh file, with an
additional part to save the stdout, e.g.

root -l -q 'mainfit_Bifurc.C(7)' | tee output_7.txt
root -l -q 'mainfit_Bifurc.C(8)' | tee output_8.txt
etc

Running the .sh file will then run over the selected pixels in turn. The plot of the fit is saved as e.g. output_7.pdf.



**** Fit components *****

The pedestal is described either by a simple Gaussian (in mainfit_FloatScales.C) or by a bifucated Gaussian (in 
mainfit_Bifurc.C).

The signal photoelectron response is described by a series of Poisson distributions, one each for the signals
generated by one, two or three signal photoelectrons. The distributions for multiple photoelectrons have their means
scaled up and their height scaled down accordingly, compared to the single photoelectron response. Since the 
average number of photoelectrons is low, the probability of having more than 3 signal photoelectrons is negligible,
so no distributions are included for this.

There is a "cross-talk" distribution, to describe the response to photoelectrons which arrive at a neighbouring 
pixel to the pixel under consideration. This distribution has a mean (relative to the pedestal location) which is
scaled down relative to the mean of the signal photoelectron response. The ratio of these means, referred to as
"XTalkGainRatio" in the code, is fixed to be 0.05. It has been fixed because the fit was found to not be stable when
it was left free. The numerical value was chosen "by eye" to give a good fit to the relevant region in certain
spectra. The probability of having a "cross-talk" photoelectron is left free in the fit (i.e. it is not related to
the probability of having a signal photoelectron). Distributions for up to two "cross-talk" photoelectrons are 
considered.

A further distribution is needed to describe those events containing both a signal photoelectron and a photoelectron
arriving at a neighbouring pixel. This distribution is only included for the case of one signal photoelectron and 
one "cross-talk" photoelectron, as the probability of any higher-order cases should be negligible.



**** Fit parameters *****

p0 is the normalisation. The spectra have 50 000 events. Due to the binning of the histogram, the value of p0 should
be close to 500 000 (ten times the number of events).

p1 is the mean channel of the pedestal component. This value can change a lot between spectra.

p2 is the width of the pedestal (i.e. the electronic noise). In mainfit_Bifurc.C, this is the width of the left hand
side of the pedestal only.

p3 is the signal gain. So the signal part of the histogram should peak near (p1 + p3).

p4 is the average number of signal photoelectrons. The higher p4 is, the larger the signal component is relative to the
pedestal component. In these spectra, p4 is typically of the order of 0.1.

p5 is the average number of cross-talk photoelectrons. The higher p5 is, the larger the cross-talk component is relative 
to the pedestal component. Since the cross-talk can come from any of the neighbouring pixels, the value of p5 can be
of the same order (or even larger) than p4.

p6 and p7 are more difficult to describe. The Poisson distribution that describes the signal photoelectron response is
a true Poisson only in the original "variable", which is the number of electrons produced in the dynode chain. Since
the variable that is present in the spectrum is not the number of electrons but the ADC channel, some conversion is
needed. Essentially p6 gives a conversion for the gain of the signal response, while p7 gives the conversion for the
width of the signal response. Typically, spectra with larger gains need larger values of p6 and p7. 
In previous iterations of the code, p6 and p7 were fixed to certain hard-coded values. However it was found that this
setup could not provide reasonable fits to spectra with different gains. So the code was changed to allow p6 and p7
to vary within certain limits, which are determined empirically. However for certain spectra, it is necessary to fix
one or both of p6 and p7 in order to achieve convergence and an accurate error matrix.

p8 is, in mainfit_Bifurc.C, the width of the right hand side of the pedestal. There is no p8 in mainfit_FloatScales.C.



**** Code Structure ****

The first function, finalFunc(), calculates the total PDF by combining the various components. It is called by the 
main function when the fit is done, and takes as arguments the data and the fit parameters. 

The next functions, from plotpe() to plotsignalplusxtalk(), are used purely to plot the different components of the
fit, after the fit is done. Editing these functions (without editing finalFunc() ) will not affect the fit result.

The main function has the same name as the .C file (i.e. mainfit_FloatScales() or mainfit_Bifurc() ). It takes as 
its argument the pixel number that you wish to run over (as described in "How to run the code" above).

The main function starts by defining the path to the input .root file. Then the histogram to hold the data is
constructed. Currently the histogram has 200 bins, and has range [0,2000]. This suits the spectra that have been
taken in Edinburgh, but can be changed if needed.

Next, the histogram is filled from the input file. One important point is that the filling of the histogram depends
on the binning. Currently the raw data needs to be scaled by 0.1, because this is the ratio of the number of bins to
the size of the range (200/2000). If the binning is changed, this number also needs to be changed.

The seed values for some of the fit parameters come from looking at the spectrum in question. The next part of the
function derives these seed values. First, the pedestal position (p1) is estimated simply by finding the highest bin
of the histogram. Next, the signal gain (p3) is estimated). This is done by making a new histogram from the original
histogram, with the pedestal region removed. The number of channels that need to be removed to remove the pedestal
region can be chosen (this is the definition of "posnum"). It is observed that removing the 10 channels to the right
of the pedestal position is sufficient for spectra with low gains, while for spectra with higher gain a higher value
is needed; 25 seems to work well. The highest bin of the spectrum with the pedestal removed is taken to be the
peak of signal part of the spectrum. The seed for the signal gain is then taken as the difference between this and
the mean of the pedestal (position1 = position1 - position).

Next, the seed values, along with the upper and lower allowed ranges, are set for the fit parameters. For p1 and p3
the values calculated above are used, for the rest the values are hard-coded. These values might need changing to
suit different spectra, particularly for spectra with very different gains.

Once the seed values are defined, the fit function is constructed, and the fit is performed. Then the plot to show the
data and the fit components is constructed. This involves calling the various plotting functions mentioned above.

Finally, the plot is saved as a .pdf, with a name including the pixel number (to allow for unique names when more than
one pixel is ran over).
